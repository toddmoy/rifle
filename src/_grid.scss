.grid-container {
  @extend .u-ctr;
  max-width: map-get($grid, maxWidth);
  width    : 100%;
}

.row:before,
.row:after  {
  @extend .u-cf;
}

// If a grid is nested in a column, shift it left and
// increase its width, so that its content aligns with
// the parent columns'.

[class*="col-"] .row {
  margin: 0 -1 * map-get($grid, gutterWidth);
  width: calc(100% + 2 * map-get($grid, gutterWidth));
}

// Global column settings

[class*="col-"] {
  float     : left;
  min-height: 1px;
  padding   : 0 map-get($grid, gutterWidth);
}

// Columns
// example; .col-1

@for $i from 1 through map-get($grid, numOfColumns) {
  .col-#{$i} {
    width: percentage($i / map-get($grid, numOfColumns));
  }
}

// Breakpoint-oriented columns
// example: .col-md-1

@each $key, $value in $breakpoints {
  @media (min-width: #{$value}) {
    @for $i from 1 through map-get($grid, numOfColumns) {
      .col-#{$key}-#{$i} {
        width: percentage($i / map-get($grid, numOfColumns));
      }
    }
  }
}

// Column offsets
// example; .col-offset-1

@for $i from 1 through map-get($grid, numOfColumns) {
  .col-offset-#{$i} {
    margin-left: percentage($i / map-get($grid, numOfColumns));
  }
}

// Breakpoint-oriented column offsets
// example; .col-offset-md-1

@each $key, $value in $breakpoints {
  @media (min-width: #{$value}) {
    @for $i from 1 through map-get($grid, numOfColumns) {
      .col-offset-#{$key}-#{$i} {
        margin-left: percentage($i / map-get($grid, numOfColumns));
      }
    }
  }
}
